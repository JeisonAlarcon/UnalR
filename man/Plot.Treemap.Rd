% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Plot_Treemap.R
\name{Plot.Treemap}
\alias{Plot.Treemap}
\title{Cree un diagrama de árbol (\emph{treemap}) dinámico y flexible con diversos paquetes}
\usage{
Plot.Treemap(
  datos,
  variables,
  atributo,
  textFreq = "N",
  metodo = c("Classic", "Classic2", "Sunburst", "Sunburst2"),
  estadistico = c("Promedio", "Mediana", "Varianza", "SD", "CV", "Min", "Max"),
  colores,
  titulo = "",
  libreria = c("highcharter", "plotly"),
  estilo = NULL
)
}
\arguments{
\item{datos}{Un data frame, no un vector numérico.}

\item{variables}{Una lista (\emph{ya sea creada con la sintaxis \code{base} o \code{tidy}})
con las variables categóricas dentro del data frame ingresado en \code{datos} con
las que se desea crear la jerarquía (\emph{recuerde que esta se crea de izquierda
a derecha, es decir la primera hace referencia al grupo, la segunda al subgrupo,
etc.}).}

\item{atributo}{Una variable numérica dentro del data frame ingresado en \code{datos}.
Este es opcional y solo aplica en el caso de un nivel, es decir, cuando se
ingresa únicamente una variable.}

\item{textFreq}{Cadena de caracteres indicando el nombre que se le va a dar al
recuento en cada uno de los grupos. Por defecto se emplea el rótulo "N".}

\item{metodo}{Cadena de caracteres indicando el diseño con el cual se realizará
el gráfico (\emph{en el caso de ingresar dos niveles o más}). Los valores permitidos
son "Classic" (\emph{valor predeterminado}), "Classic2", "Sunburst" y "Sunburst2",
así se usará las funciones \link[d3treeR:d3tree]{d3tree()},
\link[d3treeR:d3tree2]{d3tree2()}, \link[sunburstR:sunburst]{sunburst()} y
\link[sunburstR:sund2b]{sund2b()} respectivamente.}

\item{estadistico}{Igual uso que en \code{\link[=Plot.Mapa]{Plot.Mapa()}}}

\item{colores}{Igual uso que en \code{\link[=Plot.Series]{Plot.Series()}}, con algunos matices, cuando
usamos \code{Highcharter} y nos encontramos en el caso de un nivel y especificamos
un atributo es recomendable pasarle una escala de colores, pues con esto se
construirá la barra horizontal. En el caso de usar el argumento \code{atributo}
se puede ingresar el nombre de una paleta, por ejemplo "Set1".}

\item{titulo}{Igual uso que en \code{\link[=Plot.Series]{Plot.Series()}}}

\item{libreria}{Igual uso que en \code{\link[=Plot.Torta]{Plot.Torta()}}, con algunos matices, pues
en el caso de ingresar más de una variable categórica se omitirá dicho argumento,
ya que \code{metodo} tomará su lugar.}

\item{estilo}{Lista compuesta por varios parámetros, los cuales van a ser usados
para graficar el treemap y cuyo objetivo es personalizar pequeños detalles
de éste.
\itemize{
\item \code{hc.Tema} y \code{hc.Credits}: Igual uso que en \code{\link[=Plot.Series]{Plot.Series()}}
\item \code{hc.borderRadius}: Un número entero positivo que indica el radio del borde
de cada elemento. El valor por defecto es 0 (\emph{rectángulos}).
\item \code{ply.Opacidad}: Igual uso que en \code{\link[=Plot.Radar]{Plot.Radar()}}
\item \code{ply.Credits}: Igual uso que en \code{\link[=Plot.Series]{Plot.Series()}}
\item \code{sun.Explanation}: Cadena de caracteres indicando qué es lo que se desea
ver en el centro del sunburst al pasar el mouse por los diferentes anillos
(\emph{niveles de la jerarquía}). Los valores permitidos son "All"
(\emph{valor predeterminado}), "Count" y "Percent". Solo aplica para cuando
\code{método = Sunburst}.
\item \code{sun.Color}: A diferencia del argumento \code{colores} acá puede pasar una paleta
o vector de colores sin que se recorte (\emph{más no se recicle}) éste a
la longitud de categorías del nodo padre. Su uso reemplaza el funcionamiento
del argumento \code{colores}. Solo aplica para cuando \code{método = Sunburst}.
\item \code{sun.showLabels}: Si es \code{FALSE} (\emph{valor predeterminado}) no se mostrará
etiquetas en los cortes. Solo aplica para cuando \code{método = Sunburst2}.
\item \code{sun.colorRoot}: Cadena de caracteres que indica el color del nodo raíz
(\emph{root}). Puede indicar el color con el nombre (\code{"red"}), código
hexadecimal (\code{"#FF0000"}) o RGB (\code{rgb(1, 0, 0)}). El valor por defecto es
"rojo". Solo aplica para cuando \code{método = Sunburst2}.
}}
}
\value{
Retorna el treemap (\emph{objeto widget de HTML}) creado. La clase del objeto
retornado será un "htmlwidget" y dependiendo de la librería usada pertenecerá
adicionalmente a la clase "highchart", "plotly", " d3tree", "d3tree2", "sunburst"
o "sund2b".
}
\description{
Esta función proporciona excelentes herramientas y opciones para la visualización
de datos jerárquicos/estructurados como un conjunto de rectángulos anidados.
Cada grupo está representado por un rectángulo, cuya área (\emph{tamaño}) es proporcional
a su frecuencia absoluta (\emph{recuento}) y el color se usa para mostrar otra
dimensión numérica. Usando la interactividad, es posible representar varias
dimensiones/niveles: grupos, subgrupos, etc. Dicha gráfica se va a representar
usando la librería \code{Highcharter}, \code{Plotly}, \code{d3treeR}, entre otras, las cuales
usa internamente \code{JavaScript}.
}
\details{
Si está trabajando en un \verb{R Markdown} o un aplicativo \code{Shiny} no se puede usar
de forma conjunta el \code{método = Classic} (ó \code{Classic2}) y \code{método = Sunburst}
(ó \code{Sunburst2}), pues se trata de un problema interno, ya que usan versiones
diferentes de \code{d3}, puede darle seguimiento al problema
\href{https://github.com/timelyportfolio/sunburstR/issues/102}{aquí}. De igual forma,
si utiliza la librería \code{sunburstR} en algunas ocasiones se le verán afectadas
las tablas creadas con \code{DT}.
}
\examples{
Msj <- "Acompa\u00f1ado del Estad\u00edstico seleccionado para la Variable Edad."
if (require("viridis")) {
  Plot.Treemap(
    datos       = ejGraduados,
    variables   = SEDE_NOMBRE_MAT,
    atributo    = EDAD_MOD,
    textFreq    = "Tamaño de la Muestra",
    estadistico = "Max",
    colores     = inferno(10),
    titulo      = "TOTAL DE GRADUADOS POR SEDE DE LA UNIVERSIDAD NACIONAL",
    libreria    = "highcharter",
    estilo      = list(hc.Tema = 7, hc.borderRadius = 20, hc.Credits = Msj)
  )
}
Plot.Treemap(
  datos       = ejGraduados,
  variables   = FACULTAD,
  atributo    = EDAD_MOD,
  textFreq    = "n",
  estadistico = "CV",
  colores     = turbo(10, direction = -1),
  titulo      = "TOTAL DE GRADUADOS POR FACULTAD EN LA UNAL",
  libreria    = "plotly",
  estilo      = list(ply.Credits = list(x = 0.6, y = 1, text = Msj))
)

\dontrun{
misColores <- c(
  "#29ABE2", # AZUL CLARO  | Amazonia
  "#8CC63F", # VERDE       | Bogota
  "#CC241D", # ROJO        | Caribe
  "#0071BC", # AZUL VIVO   | Manizales
  "#F15A24", # NARANJA     | Medellin
  "#FBB03B", # AMARILLO    | Orinoquia
  "#93278F", # MORADO      | Palmira
  "#8A381A"  # GRIS        | Tumaco
)
if (require("dplyr")) {
  Plot.Treemap(
    datos     = ejGraduados,
    variables = vars(SEDE_NOMBRE_MAT, FACULTAD, PROGRAMA),
    metodo    = "Classic",
    colores   = misColores # "Set3"
  )
  Plot.Treemap(
    datos     = ejGraduados,
    variables = vars(SEDE_NOMBRE_MAT, FACULTAD, PROGRAMA),
    metodo    = "Classic2",
    colores   = "Set2"
  )

  Plot.Treemap(
    datos     = ejGraduados,
    variables = vars(SEDE_NOMBRE_MAT, FACULTAD, PROGRAMA),
    metodo    = "Sunburst",
    colores   = misColores,
    estilo    = list(sun.Explanation = "All")
  )
  Plot.Treemap(
    datos     = ejGraduados,
    variables = vars(SEDE_NOMBRE_MAT, FACULTAD, PROGRAMA),
    metodo    = "Sunburst",
    # colores   = misColores,
    estilo    = list(sun.Explanation = "All", sun.Color = list(range = RColorBrewer::brewer.pal(11, "Spectral")))
  )

  Plot.Treemap(
    datos     = ejGraduados,
    variables = vars(SEDE_NOMBRE_MAT, FACULTAD, PROGRAMA),
    metodo    = "Sunburst2"
  )
  Plot.Treemap(
    datos     = ejGraduados,
    variables = vars(SEDE_NOMBRE_MAT, FACULTAD, PROGRAMA),
    metodo    = "Sunburst2",
    colores   = misColores,
    estilo    = list(sun.showLabels = TRUE, sun.colorRoot = "#EF0055")
  )
}
}

}
